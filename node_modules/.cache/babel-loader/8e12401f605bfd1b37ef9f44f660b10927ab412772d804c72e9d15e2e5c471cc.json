{"ast":null,"code":"var _objectSpread = require(\"C:/Users/Mariam/Desktop/project github/Game project/app1/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/Mariam/Desktop/project github/Game project/app1/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/Mariam/Desktop/project github/Game project/app1/node_modules/@babel/runtime/helpers/createClass.js\").default;\n/*!\n  * Bootstrap config.js v5.2.3 (https://getbootstrap.com/)\n  * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('./index'), require('../dom/manipulator')) : typeof define === 'function' && define.amd ? define(['./index', '../dom/manipulator'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Config = factory(global.Index, global.Manipulator));\n})(this, function (index, Manipulator) {\n  'use strict';\n\n  var _interopDefaultLegacy = function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      default: e\n    };\n  };\n  var Manipulator__default = /*#__PURE__*/_interopDefaultLegacy(Manipulator);\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap (v5.2.3): util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n  /**\n   * Class definition\n   */\n  var Config = /*#__PURE__*/function () {\n    function Config() {\n      _classCallCheck(this, Config);\n    }\n    _createClass(Config, [{\n      key: \"_getConfig\",\n      value: function _getConfig(config) {\n        config = this._mergeConfigObj(config);\n        config = this._configAfterMerge(config);\n        this._typeCheckConfig(config);\n        return config;\n      }\n    }, {\n      key: \"_configAfterMerge\",\n      value: function _configAfterMerge(config) {\n        return config;\n      }\n    }, {\n      key: \"_mergeConfigObj\",\n      value: function _mergeConfigObj(config, element) {\n        var jsonConfig = index.isElement(element) ? Manipulator__default.default.getDataAttribute(element, 'config') : {}; // try to parse\n\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), typeof jsonConfig === 'object' ? jsonConfig : {}), index.isElement(element) ? Manipulator__default.default.getDataAttributes(element) : {}), typeof config === 'object' ? config : {});\n      }\n    }, {\n      key: \"_typeCheckConfig\",\n      value: function _typeCheckConfig(config) {\n        var configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;\n        for (var _i = 0, _Object$keys = Object.keys(configTypes); _i < _Object$keys.length; _i++) {\n          var property = _Object$keys[_i];\n          var expectedTypes = configTypes[property];\n          var value = config[property];\n          var valueType = index.isElement(value) ? 'element' : index.toType(value);\n          if (!new RegExp(expectedTypes).test(valueType)) {\n            throw new TypeError(\"\".concat(this.constructor.NAME.toUpperCase(), \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\".\"));\n          }\n        }\n      }\n    }], [{\n      key: \"Default\",\n      get:\n      // Getters\n      function get() {\n        return {};\n      }\n    }, {\n      key: \"DefaultType\",\n      get: function get() {\n        return {};\n      }\n    }, {\n      key: \"NAME\",\n      get: function get() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n      }\n    }]);\n    return Config;\n  }();\n  return Config;\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;EAAA;;;;;;EAUA;;;EAAA,IAIMA,MAAN;IAAA;MAAA;IAAA;IAAA;MAAA;MAAA,OAcEC,oBAAWC,MAAD,EAAS;QACjBA,MAAM,GAAG,KAAKC,eAAL,CAAqBD,MAArB,CAAT;QACAA,MAAM,GAAG,KAAKE,iBAAL,CAAuBF,MAAvB,CAAT;QACA,IAAKG,iBAAL,CAAsBH,MAAtB;QACA,OAAOA,MAAP;MACD;IAAA;MAAA;MAAA,OAEDE,2BAAkBF,MAAD,EAAS;QACxB,OAAOA,MAAP;MACD;IAAA;MAAA;MAAA,OAEDC,yBAAgBD,MAAD,EAASI,OAAT,EAAkB;QAC/B,IAAMC,UAAU,GAAGC,eAAS,CAACF,OAAD,CAAT,GAAqBG,4BAAW,CAACC,gBAAZ,CAA6BJ,OAA7B,EAAsC,QAAtC,CAArB,GAAuE,EAA1F,CAD+B;;QAG/B,mEACK,IAAKK,YAAL,CAAiBC,OADf,GAED,OAAOL,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8C,EAAlD,GACIC,eAAS,CAACF,OAAD,CAAT,GAAqBG,4BAAW,CAACI,iBAAZ,CAA8BP,OAA9B,CAArB,GAA8D,EAAlE,GACI,OAAOJ,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAA1C;MAEH;IAAA;MAAA;MAAA,OAEDG,0BAAiBH,MAAD,EAAqD;QAAA,IAA5CY,WAAW,uEAAG,IAAKH,YAAL,CAAiBI,WAAxC;QACd,gCAAuBC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAvB,kCAAiD;UAA5C,IAAMI,QAAX;UACE,IAAMC,aAAa,GAAGL,WAAW,CAACI,QAAD,CAAjC;UACA,IAAME,KAAK,GAAGlB,MAAM,CAACgB,QAAD,CAApB;UACA,IAAMG,SAAS,GAAGb,eAAS,CAACY,KAAD,CAAT,GAAmB,SAAnB,GAA+BE,YAAM,CAACF,KAAD,CAAvD;UAEA,IAAI,CAAC,IAAIG,MAAJ,CAAWJ,aAAX,EAA0BK,IAA1B,CAA+BH,SAA/B,CAAL,EAAgD;YAC9C,MAAM,IAAII,SAAJ,WACD,IAAKd,YAAL,CAAiBe,IAAjB,CAAsBC,WAAtB,EAAoC,wBAAYT,QAAS,gCAAmBG,SAAU,oCAAuBF,aAAc,SADhI;UAGD;QACF;MACF;IAAA;MAAA;MAAA;MA/CD;MACkB,eAAG;QACnB,OAAO,EAAP;MACD;IAAA;MAAA;MAAA,KAEqB,eAAG;QACvB,OAAO,EAAP;MACD;IAAA;MAAA;MAAA,KAEc,eAAG;QAChB,MAAM,IAAIS,KAAJ,CAAU,qEAAV,CAAN;MACD;IAAA;IAAA;EAAA","names":["Config","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","isElement","Manipulator","getDataAttribute","constructor","Default","getDataAttributes","configTypes","DefaultType","Object","keys","property","expectedTypes","value","valueType","toType","RegExp","test","TypeError","NAME","toUpperCase","Error"],"sources":["C:\\Users\\Mariam\\Desktop\\project github\\Game project\\app1\\node_modules\\bootstrap\\js\\src\\util\\config.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.2.3): util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isElement, toType } from './index'\nimport Manipulator from '../dom/manipulator'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const property of Object.keys(configTypes)) {\n      const expectedTypes = configTypes[property]\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}